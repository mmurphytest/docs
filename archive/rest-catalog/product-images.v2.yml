openapi: '3.0.3'
info:
  title: Catalog - Product Images V2.
  termsOfService: 'https://www.bigcommerce.com/terms'
  contact:
    name: BigCommerce
    url: 'https://www.bigcommerce.com'
    email: support@bigcommerce.com
  version: '1.0.1'
  description: |
    Deprecated
    Avoid using this API operation if possible.
    It will be removed in a future version.
    For the most up-to-date version of this API, see [Product Images](https://developer.bigcommerce.com/docs/rest-catalog/products/images#get-all-product-images)
servers:
  - url: 'https://{{store_url}}/api/v2'
    variables:
      store_url:
        default: store_url
        description: Permanent url of the BigCommerce store.
    description: BigCommerce API Gateway
security:
  - basicAuth: []
tags:
  - name: Product Images V2
paths:
  '/products/{product_id}/images':
    get:
      tags:
        - Product Images V2
      summary: List Product Images
      description: Gets the images associated with a product. (Default sorting is by image id, from lowest to highest.)
      operationId: getProductProductImages
      parameters:
        - name: page
          in: query
          description: Specifies the page number in a limited (paginated) list of Product Images.
          schema:
            type: integer
        - name: limit
          in: query
          description: |-
            Controls the number of items per page in a limited (paginated) list of Product Images.
            The maximum limit is 250. If a limit isn’t provided, up to 50 images are returned by default.
          schema:
            type: integer
      responses:
        '200':
          $ref: '#/components/responses/ProductImages'
        '401':
          $ref: '#/components/responses/Errors'
        '403':
          $ref: '#/components/responses/Errors'
        '404':
          $ref: '#/components/responses/Errors'
        '405':
          $ref: '#/components/responses/Errors'
    post:
      tags:
        - Product Images V2
      summary: Creates a new product image.
      description: |-
        Creates a new product image associated with a product.

        **Required Fields:**
        - image_file

        **Limits**
        - 1000 Product Images per product limit.
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProductImageCreateRequest'
          'application/xml':
            schema:
              $ref: '#/components/schemas/ProductImageCreateRequest'
        required: true
      responses:
        '201':
          $ref: '#/components/responses/ProductImage'
        '400':
          $ref: '#/components/responses/Errors'
        '401':
          $ref: '#/components/responses/Errors'
        '403':
          $ref: '#/components/responses/Errors'
        '404':
          $ref: '#/components/responses/Errors'
        '405':
          $ref: '#/components/responses/Errors'
        '406':
          $ref: '#/components/responses/Errors'
        '415':
          $ref: '#/components/responses/Errors'
    delete:
      tags:
        - Product Images V2
      summary: Deletes multiple Product Images.
      description: Deletes multiple product images.
      operationId: deleteProductProductImages
      parameters:
        - name: page
          in: query
          description: Specifies the page number in a limited (paginated) list of Product Images you can delete.
          schema:
            type: integer
        - name: limit
          in: query
          description: |-
            Parameters can be added to the URL query string to paginate the collection.
            The maximum limit is 250. If a limit isn’t provided, up to 50 product images are returned by default.
          schema:
            type: integer
      responses:
        '204':
          description: 204 No Content
          content: {}
        '401':
          $ref: '#/components/responses/Errors'
        '403':
          $ref: '#/components/responses/Errors'
        '404':
          $ref: '#/components/responses/Errors'
        '405':
          $ref: '#/components/responses/Errors'
    parameters:
      - $ref: '#/components/parameters/ProductIdParam'
  '/products/{product_id}/images/{id}':
    get:
      tags:
        - Product Images V2
      summary: Get a Product Image.
      description: Gets a product image.
      operationId: getProductProductImage
      responses:
        '200':
          $ref: '#/components/responses/ProductImage'
        '401':
          $ref: '#/components/responses/Errors'
        '403':
          $ref: '#/components/responses/Errors'
        '404':
          $ref: '#/components/responses/Errors'
        '405':
          $ref: '#/components/responses/Errors'
    put:
      tags:
        - Product Images V2
      summary: Update a Product Image.
      description: |-
        Updates an existing product image associated with a product.

        **Read-Only**
        - product_id
        - id
      operationId: updateProductProductImage
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ProductImageUpdateRequest'
          'application/xml':
            schema:
              $ref: '#/components/schemas/ProductImageUpdateRequest'
        required: true
      responses:
        '200':
          $ref: '#/components/responses/ProductImage'
        '400':
          $ref: '#/components/responses/Errors'
        '401':
          $ref: '#/components/responses/Errors'
        '403':
          $ref: '#/components/responses/Errors'
        '404':
          $ref: '#/components/responses/Errors'
        '405':
          $ref: '#/components/responses/Errors'
        '406':
          $ref: '#/components/responses/Errors'
        '415':
          $ref: '#/components/responses/Errors'
    delete:
      tags:
        - Product Images V2
      summary: Delete a Product Image.
      description: Deletes a product image associated with a product.
      operationId: deleteProductProductImage
      responses:
        '204':
          description: 204 No Content.
          content: {}
        '401':
          $ref: '#/components/responses/Errors'
        '403':
          $ref: '#/components/responses/Errors'
        '404':
          $ref: '#/components/responses/Errors'
        '405':
          $ref: '#/components/responses/Errors'
    parameters:
      - $ref: '#/components/parameters/ProductIdParam'
      - $ref: '#/components/parameters/ProductImageIdParam'
  /products/images/count:
    get:
      tags:
        - Product Images V2
      summary: Count Product Images
      description: Gets a count of the number of Product Images in the store.
      operationId: getProductProductImagesCount
      responses:
        '200':
          $ref: '#/components/responses/ProductImagesCount'
        '401':
          $ref: '#/components/responses/Errors'
        '403':
          $ref: '#/components/responses/Errors'
        '404':
          $ref: '#/components/responses/Errors'
        '405':
          $ref: '#/components/responses/Errors'
components:
  schemas:
    ProductImage:
      title: Product Image response
      xml:
        name: image
      allOf:
        - $ref: '#/components/schemas/ProductImageWrite'
        - $ref: '#/components/schemas/ProductImageRead'
      description: 'Gets product image associated with a product.'
    ProductImageCreateRequest:
      title: Product Image POST request body
      required:
        - image_file
      type: object
      allOf:
        - $ref: '#/components/schemas/ProductImageWrite'
      xml:
        name: image
      description: 'Request body for product image create'
    ProductImageUpdateRequest:
      title: Product Image PUT request body
      type: object
      xml:
        name: image
      allOf:
        - $ref: '#/components/schemas/ProductImageWrite'
      description: 'Request body for product image update'
    ProductImageWrite:
      title: Writeable Image attributes
      type: object
      properties:
        image_file:
          type: string
          description: |
            When specifying a product image, the image_file should be specified as either:
            a path to an image already uploaded via WebDAV to the import directory
            (with the path relative to the import directory); or a URL to an image accessible on the internet.
          example: "sample_images/in_123__14581.jpg"
        is_thumbnail:
          type: boolean
          description: If true, the image is used as the product's thumbnail.
        sort_order:
          maximum: 2147483647
          minimum: -2147483648
          type: integer
          description: |
            The order in which the image will be displayed on the product page. Higher integers give the image a lower priority.
            When updating, if the image is given a lower priority, all images with a `sort_order` the same as or greater than the image's new `sort_order` value will have their `sort_order`s reordered.
          example: 10
        description:
          type: string
          description: The description for the image
          example: Product Image Description
    ProductImageRead:
      title: Read-only Image attributes
      type: object
      properties:
        id:
          minimum: 1
          type: integer
          description: |-
            The unique numeric ID of the product image increments sequentially. Read-Only.
          example: 6
        product_id:
          minimum: 1
          type: integer
          description: |-
            ID of the associated product. Read-Only
          example: 6
        zoom_url:
          readOnly: true
          type: string
          description: |
            The zoom URL for this image.
            By default, this is used as the zoom image on product pages when zoom images are enabled.
          example: "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.1280.1280.jpg?c=1"
        thumbnail_url:
          readOnly: true
          type: string
          description: |
            The thumbnail URL for this image.
            By default, this is the image size used on the category page and in side panels.
          example: "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.386.513.jpg?c=1"
        standard_url:
          readOnly: true
          type: string
          description: |
            The standard URL for this image. By default, this is used for product-page images.
          example: "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.220.290.jpg?c=1"
        tiny_url:
          readOnly: true
          type: string
          description: |
            The tiny URL for this image.
            By default, this is the image size used for thumbnails beneath the product image on a product page.
          example: "https://cdn.url.path/bcapp/et7xe3pz/products/32/images/247/in_123__14581.1393831046.44.58.jpg?c=1"
        date_created:
          readOnly: true
          type: string
          description: |
            The date on which the product image was created.
          format: date-time
          example: 'Mon, 24 Sep 2024 01:17:14 +0000'
        date_modified:
          readOnly: true
          type: string
          description: |
            The date on which the product image was modified.
          format: date-time
          example: 'Mon, 25 Sep 2024 01:17:14 +0000'
        is_sample:
          readOnly: true
          type: boolean
          description: |
            True if it was setup from sample data. Otherwise is false.
    ImagesCount:
      title: Product Image Count
      type: object
      xml:
        name: images
      properties:
        count:
          type: integer
          description:  A count of the number of Product Images in the store.
          example: 100
    error:
      title: Product Image error response
      type: object
      xml:
        name: error
      properties:
        status:
          type: integer
          description: The HTTP status code.
        message:
          type: string
          description: Error message
  responses:
    Errors:
      description: General error
      content:
        'application/json':
          schema:
            type: array
            items:
              $ref: '#/components/schemas/error'
        'application/xml':
          schema:
            type: array
            items:
              $ref: '#/components/schemas/error'
            xml:
              name: errors
              wrapped: true
    ProductImage:
      description: Get Product Image Response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ProductImage'
        application/xml:
          schema:
            $ref: '#/components/schemas/ProductImage'
            xml:
              name: images
    ProductImages:
      description: Gets array of Product Images Response
      content:
        'application/json':
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProductImage'
        'application/xml':
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ProductImage'
            xml:
              name: images
              wrapped: true
    ProductImagesCount:
      description: 'Gets a count of the total number of Product Images in the store.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ImagesCount'
        application/xml:
          schema:
            $ref: '#/components/schemas/ImagesCount'
            xml:
              name: images
  parameters:
    ProductImageIdParam:
      name: id
      description: |
        The ID of the `ProductImage`.
      required: true
      in: path
      schema:
        type: integer
    ProductIdParam:
      name: product_id
      in: path
      description: |
        The ID of the `Product` to which the resource belongs.
      required: true
      schema:
        type: integer
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
